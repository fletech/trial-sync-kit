---
description: 
globs: 
alwaysApply: true
---
# THEMISON Database Migration PRD

## Objective
Replace localStorage with Supabase database for user registration, login, password reset, and onboarding flow (Steps 1-3) while maintaining the existing multi-step form pattern and UI/UX.

## Current State Analysis

### Existing Setup ✅
- Supabase client configured in `src/lib/`
- Auth pages already using Supabase
- Multi-step onboarding with localStorage temporary storage
- Hybrid system: Supabase auth + localStorage data

### Files to Modify
- `src/services/userService.ts` - Auth and user management
- `src/pages/onboarding/StepOnePage.tsx` - Add name fields
- `src/pages/onboarding/StepTwoPage.tsx` - Add phase field
- `src/pages/onboarding/StepThreePage.tsx` - Remove hardcoded logic, save to DB

## Database Schema

### For MCP queries: Project id in Supabase
```json
{
  "project_id": "upabfzjyiqirixxcpgly"
}
```
### Profiles Table (clean existing)
```sql
-- Remove unnecessary fields
ALTER TABLE profiles DROP COLUMN IF EXISTS completed;

-- Keep existing fields: id, first_name, last_name, email, role_in_clinical_research, created_at
-- Note: role_in_clinical_research is equivalent to role_in_research from PRD
```

### Trials Table (clean existing)
```sql
-- Remove unnecessary fields for onboarding scope
ALTER TABLE trials 
  DROP COLUMN IF EXISTS status,
  DROP COLUMN IF EXISTS visits,
  DROP COLUMN IF EXISTS description, 
  DROP COLUMN IF EXISTS pending_task,
  DROP COLUMN IF EXISTS study_start,
  DROP COLUMN IF EXISTS estimated_close_out;

-- Keep essential fields: id, name, location, sponsor, phase, created_by
-- Keep UI helper fields: is_new, image_url  
-- created_at/updated_at come by default in Supabase
```

### Team Members Table (enhance existing)
```sql
-- Remove unnecessary fields
ALTER TABLE team_members
  DROP COLUMN IF EXISTS status,
  DROP COLUMN IF EXISTS avatar;

-- Add missing fields
ALTER TABLE team_members 
  ADD COLUMN IF NOT EXISTS invited_by uuid REFERENCES auth.users(id),
  ADD COLUMN IF NOT EXISTS created_at timestamp with time zone DEFAULT now();

-- Keep existing strategic fields: id, name, email, role, profile_id
-- profile_id strategy: null when invited, filled when user completes signup
```

### Team Members Invitation Flow
The `profile_id` field enables a smart invitation system:

#### Step-by-Step Flow:
1. **User A invites colleague B via onboarding Step 3**:
   ```sql
   INSERT INTO team_members (name, email, role, invited_by, profile_id)
   VALUES ('John Doe', 'john@example.com', 'Clinical research coordinator', 'user_a_id', null);
   ```

2. **Colleague B receives invitation email** (future feature)

3. **Colleague B completes registration/signup**:
   - Supabase creates auth.user with new ID
   - Supabase creates profiles record with same ID
   - **Auto-linking trigger** updates team_members:
   ```sql
   UPDATE team_members 
   SET profile_id = new_user_id 
   WHERE email = 'john@example.com' AND profile_id IS NULL;
   ```

4. **Query states**:
   ```sql
   -- Pending invitations
   SELECT * FROM team_members WHERE profile_id IS NULL;
   
   -- Active team members  
   SELECT * FROM team_members WHERE profile_id IS NOT NULL;
   
   -- Get full member info with profile data
   SELECT tm.*, p.first_name, p.last_name 
   FROM team_members tm 
   LEFT JOIN profiles p ON tm.profile_id = p.id;
   ```

#### Benefits:
- ✅ No orphaned data when users don't complete signup
- ✅ Clear invitation status tracking
- ✅ Automatic profile linking on signup
- ✅ Easy queries for pending vs active members
- ✅ Foundation for future invitation email system

## Implementation Plan

### Phase 1: Complete Auth Integration

#### Update userService.ts
- Replace `login()` function to use Supabase auth properly
- Replace `logout()` to use `supabase.auth.signOut()`
- Replace `isUserLoggedIn()` to check `supabase.auth.getSession()`
- Add `getUserFromDB()` function to fetch from profiles table
- Add `saveCompleteOnboarding()` function for final step

**Key Functions to Implement:**
```typescript
export const login = async (email: string, password: string, rememberMe: boolean = false)
export const logout = async ()
export const isUserLoggedIn = async (): Promise<boolean>
export const getUserFromDB = async ()
export const saveCompleteOnboarding = async ({ profile, trial, teamMembers })
```

### Phase 2: Enhance Onboarding Step 1

#### Modify StepOnePage.tsx
- Add `firstName` and `lastName` input fields to the form
- Update form validation to require all fields
- Maintain existing localStorage temporary storage pattern
- Update `updateOnboardingStep(1, { role, firstName, lastName })`

**UI Changes:**
- Add "First Name" field (required)
- Add "Last Name" field (required)
- Keep existing role selection dropdown
- Maintain existing styling and layout

### Phase 3: Enhance Onboarding Step 2

#### Modify StepTwoPage.tsx
- Add `phase` field to the form (text input for now)
- Update form validation
- Maintain existing localStorage temporary storage pattern
- Update `updateOnboardingStep(2, { name, location, sponsor, phase })`

**UI Changes:**
- Add "Phase" field after sponsor field
- Placeholder: "e.g., Phase 1, Phase 2, Phase 3"
- Required field validation

### Phase 4: Clean Up Onboarding Step 3

#### Modify StepThreePage.tsx

**Remove These Functions/Logic:**
- Remove `storage.initializeNewUser()` call
- Remove hardcoded trial creation with fake data
- Remove automatic notification creation
- Remove hardcoded trial fields (description, status, progress, upcoming, pendingTask, etc.)

**Keep This Logic:**
- Team member validation (`validMembers` filtering)
- Form UI for adding team members
- Skip functionality
- Success/error toast messages

**Add New Logic:**
- Call `saveCompleteOnboarding()` with real data from localStorage
- Clear `themison_onboarding` from localStorage after success
- Navigate to dashboard on success

**New handleSubmit structure:**
```typescript
const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();
  
  const validMembers = members.filter((m) => m.email.trim() !== "");
  const onboardingData = getOnboardingStatus();
  
  try {
    await saveCompleteOnboarding({
      profile: {
        first_name: onboardingData.firstName,
        last_name: onboardingData.lastName,
        role_in_research: onboardingData.role
      },
      trial: onboardingData.studyInfo,
      teamMembers: validMembers
    });
    
    localStorage.removeItem("themison_onboarding");
    
    toast({
      title: "Setup completed successfully!",
      description: "Welcome to THEMISON!"
    });
    
    navigate("/dashboard");
    
  } catch (error) {
    toast({
      title: "Error", 
      description: "Failed to complete setup. Please try again.",
      variant: "destructive"
    });
  }
};
```

## Technical Requirements

### Maintain Existing Patterns
- Keep multi-step form pattern (localStorage temporary storage until final step)
- Maintain existing UI/UX and styling
- Keep existing error handling and validation patterns
- Preserve navigation flow and breadcrumbs

### Error Handling
- Add try/catch blocks for all database operations
- Show user-friendly error messages with toast notifications
- Maintain form state on errors (don't clear data)
- Provide fallback behavior for network issues

### Data Validation
- Client-side validation for all required fields
- Email format validation for team members
- Prevent duplicate team member emails
- Validate trial data completeness before DB save

## Success Criteria

### Functional Requirements
1. ✅ User can register, login, and reset password using Supabase
2. ✅ Step 1: User enters first name, last name, and role → saves temporarily
3. ✅ Step 2: User creates trial with name, location, sponsor, phase → saves temporarily  
4. ✅ Step 3: User invites team members → saves everything to DB
5. ✅ Multi-step navigation works (back/forward with data persistence)
6. ✅ Data is properly saved to profiles, trials, and team_members tables
7. ✅ localStorage temporary storage is cleared after successful onboarding
8. ✅ User is redirected to dashboard after completion

### Technical Requirements  
1. ✅ No breaking changes to existing UI/UX
2. ✅ Clean removal of hardcoded/fake data generation
3. ✅ Proper error handling and user feedback
4. ✅ Database operations are atomic (rollback on failure)
5. ✅ Auth state properly managed with Supabase session

## Out of Scope
- Task creation and management (future sprint)
- Notification system integration (future sprint)  
- Document assistant features (future sprint)
- Trial overview interfaces (future sprint)
- Storage service migration for other features (future phase)

## Notes
- This migration only touches the registration → onboarding flow
- All other localStorage functionality remains unchanged for now
- Future phases will migrate trials management, team management, etc.
- Focus on clean, simple implementation without over-engineering