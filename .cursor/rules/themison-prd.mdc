---
description:
globs:
alwaysApply: true
---

# PRD: THEMISON Trial Sync Kit - Prototipo MVP

## ðŸŽ¯ Objetivo

Crear un prototipo interactivo para demostrar la gestiÃ³n de ensayos clÃ­nicos. **Todo en localStorage, sin backend.**

## ðŸ“‹ Funcionalidades Principales

### 1. Trials (Ya funcionando, prioridad baja)

- **Vista**: Grid de cards como en el diseÃ±o
- **Cada card muestra**: imagen, nombre, fase, estado, ubicaciÃ³n, progreso de visitas
- **Funcionalidades**:
  - Filtros por fase/ubicaciÃ³n/estado
  - Buscador
  - BotÃ³n "Create trial +"
- **Datos ejemplo**: 8-10 trials mockeados

### 2. Organization (NUEVO- Prioridad Alta)

- **Vista**: Lista de miembros del equipo
- **InformaciÃ³n**: Avatar, nombre, email, rol, estado (Active/Inactive)
- **Funcionalidades**:
  - BotÃ³n "Invite Members" (abre modal)
  - Cambiar roles (Admin/Member/Viewer)
  - Activar/desactivar miembros
- **Datos ejemplo**: 5-10 miembros

### 3. Notifications (NUEVO- Prioridad Alta)

- **Vista**: Centro de notificaciones
- **Tipos**: Tareas asignadas, Updates de trials, Menciones
- **Funcionalidades**:
  - Marcar como leÃ­do/no leÃ­do
  - Badge con contador en sidebar
  - Filtros por tipo
- **Datos ejemplo**: 15-20 notificaciones variadas

### 4. Task Manager - Gantt (MEJORA, prioridad baja)

- **Mejorar**:
  - Barras arrastrables para cambiar fechas
  - SincronizaciÃ³n con Kanban
  - Mejor diseÃ±o visual

## ðŸ’¾ Manejo de Datos

### Approach Simplificado

**Usar un service simple para localStorage que despuÃ©s se puede migrar:**

```javascript
// services/storage.js - UN SOLO SERVICE SIMPLE
const storage = {
  // Trials
  getTrials: () => JSON.parse(localStorage.getItem("trials") || "[]"),
  saveTrial: (trial) => {
    const trials = storage.getTrials();
    trials.push({ ...trial, id: Date.now().toString() });
    localStorage.setItem("trials", JSON.stringify(trials));
  },

  // Team
  getTeamMembers: () => JSON.parse(localStorage.getItem("team") || "[]"),
  saveTeamMember: (member) => {
    const team = storage.getTeamMembers();
    team.push({ ...member, id: Date.now().toString() });
    localStorage.setItem("team", JSON.stringify(team));
  },

  // Notifications
  getNotifications: () =>
    JSON.parse(localStorage.getItem("notifications") || "[]"),
  markNotificationAsRead: (id) => {
    const notifications = storage.getNotifications();
    const notification = notifications.find((n) => n.id === id);
    if (notification) notification.read = true;
    localStorage.setItem("notifications", JSON.stringify(notifications));
  },
};

export default storage;
```

### Estructura de Datos

```javascript
// Trials
{
  id: string,
  name: string,
  phase: string,
  status: string,
  location: string,
  sponsor: string,
  image: string,
  visits: array
}

// Team Members
{
  id: string,
  name: string,
  email: string,
  role: 'admin' | 'member' | 'viewer',
  status: 'active' | 'inactive',
  avatar: string
}

// Notifications
{
  id: string,
  type: string,
  title: string,
  message: string,
  read: boolean,
  createdAt: date
}
```

## ðŸŽ¨ DiseÃ±o

- **Seguir exactamente los mockups proporcionados**
- **Colores**: Azul principal (#5B6CFF), estados con colores del diseÃ±o
- **Componentes**: Reutilizar estilos de pÃ¡ginas existentes

## âœ… Criterios de Ã‰xito

- Flujo completo sin errores
- Datos persisten al recargar
- Fidelidad visual con diseÃ±os
- Todo es clickeable e interactivo

## ðŸš« NO incluir

- Backend real
- AutenticaciÃ³n compleja
- Features no mencionadas
- Over-engineering
